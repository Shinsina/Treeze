[{"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\index.js":"1","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\reportWebVitals.js":"2","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\App.js":"3","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\CreatePost.js":"4","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\firebase.js":"5","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\UserForm.js":"6","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\AuthContext.js":"7","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\Profile.js":"8","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\ViewPost.js":"9","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\Home.js":"10"},{"size":455,"mtime":1611851818661,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611680756939,"results":"13","hashOfConfig":"12"},{"size":816,"mtime":1612062507047,"results":"14","hashOfConfig":"12"},{"size":3987,"mtime":1612123984507,"results":"15","hashOfConfig":"12"},{"size":702,"mtime":1612054112155,"results":"16","hashOfConfig":"12"},{"size":3479,"mtime":1612127475425,"results":"17","hashOfConfig":"12"},{"size":2852,"mtime":1612122840347,"results":"18","hashOfConfig":"12"},{"size":6721,"mtime":1612127332454,"results":"19","hashOfConfig":"12"},{"size":9423,"mtime":1612133127671,"results":"20","hashOfConfig":"12"},{"size":1962,"mtime":1612127828313,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"kznvf8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\index.js",[],["45","46"],"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\reportWebVitals.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\App.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\CreatePost.js",["47"],"import React from 'react';\r\nimport { Editor } from \"@tinymce/tinymce-react\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport {AuthConsumer} from './AuthContext'\r\nimport {postsRef} from '../firebase'\r\nimport Home from './Home'\r\n\r\nclass CreatePost extends React.Component {\r\n  titleInput = React.createRef();\r\nconstructor(props) {\r\n  super(props);\r\n  //console.log(props)\r\n  //console.log(props.match)\r\n  if (!props.postId){\r\n  this.state = {\r\n    content: \"\",\r\n    title: \"\",\r\n    postingUser: \"\",\r\n    createdAt: null,\r\n    editing: false\r\n  };\r\n}\r\nelse {\r\n  this.state = {\r\n    content: props.content,\r\n    title: props.title,\r\n    postingUser: props.postingUser,\r\n    createdAt: props.createdAt,\r\n    postId: props.postId,\r\n    editing: true,\r\n  }\r\n}\r\n  this.handleChange = this.handleChange.bind(this);\r\n  this.handleSubmit = this.handleSubmit.bind(this);\r\n}\r\nhandleChange(content, editor) {\r\n  this.setState({content});\r\n}\r\nhandleSubmit(event) {\r\n  event.preventDefault();\r\n  if(window.confirm(\"Are you sure you want to post this?\")){\r\n    const post = {\r\n      content: this.state.content,\r\n      title: this.titleInput.current.value, \r\n      postingUser: this.state.postingUser,\r\n      createdAt: new Date()\r\n    }\r\n    if(this.state.editing === false){\r\n      //console.log(this.state.editing + 'FIRST POSTING')\r\n      postsRef.add({post})\r\n      //alert(\"Post was submitted\")\r\n      this.props.history.push(`/${this.state.postingUser}/profile`)\r\n    }\r\n    if(this.state.editing === true) {\r\n    //console.log(this.state.editing + 'EDITING POST')\r\n     const currentPost = postsRef.doc(this.state.postId)\r\n     currentPost.update({post})\r\n     alert(\"Please refresh the page to update posts\")\r\n    }\r\n    }\r\n  }\r\n\r\n\r\nsetUser = (userId) => {\r\n    this.setState({postingUser: userId});\r\n}\r\n\r\nredirectToProfile = (userId) => {\r\n  //console.log(userId)\r\n  this.props.history.push(`/${userId}/profile`)\r\n}\r\n\r\nredirectToHome = () => {\r\n  this.props.history.push('/')\r\n}\r\n\r\nrender () {\r\n  return (\r\n    <AuthConsumer>\r\n    {({user, logOut}) => (\r\n      <>\r\n      {user.id ? (\r\n  <div className=\"CreatePost bg-gray-600 h-screen space-y-4\">\r\n  <span className=\"PostHeader block text-center text-white text-6xl\"><h1>Post Preview</h1></span>\r\n  <span className=\"PostContent block h-1/2 overflow-y-scroll text-justify box-border px-1 border-8 border-green-500 bg-white\"><h1 className=\"text-black break-words\">{ReactHtmlParser(this.state.content)}</h1></span>\r\n  <form onSubmit={this.handleSubmit}>\r\n  <span className=\"block text-center\"><input ref={this.titleInput} type='text' placeholder='Put title of post here' defaultValue={this.state.title}/></span>\r\n  <span className=\"block text-center w-full bg-green-500 text-white\"><button className=\"w-full\" type=\"submit\" onClick={(e => this.setUser(user.id))}>Submit Post</button></span>\r\n  <span className=\"block h-full\"><Editor value={this.state.content} init={{resize: false, plugins: [\r\n             'advlist autolink lists link image charmap print preview anchor',\r\n             'searchreplace visualblocks code fullscreen',\r\n             'insertdatetime media table paste code help wordcount'],\r\n           toolbar:\r\n            'undo redo | formatselect | bold italic backcolor | \\\r\n            alignleft aligncenter alignright alignjustify | \\\r\n            bullist numlist outdent indent | removeformat | help'}}\r\n            onEditorChange={this.handleChange} className=\"overflow-y-scroll w-full h-full\"></Editor>\r\n  </span>\r\n  </form>\r\n  {!this.state.editing ? (\r\n    <span className=\"w-full bg-green-500 text-white\">\r\n    <button className=\"w-1/3 \" onClick={(e)=> this.redirectToProfile(user.id)}>Return to Your Profile</button>\r\n    <button className=\"w-1/3\" onClick={(e)=> this.redirectToHome()}>Return to Home Page</button>\r\n    <button className=\"w-1/3\" onClick={(e)=> logOut()}>Log Out</button>\r\n</span>)\r\n: (<></>)}\r\n  </div>\r\n      ) : (<Home/>)}\r\n  </>\r\n  )}\r\n  </AuthConsumer>\r\n  );\r\n}\r\n}\r\nexport default CreatePost","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\firebase.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\UserForm.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\AuthContext.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\Profile.js",["48","49","50","51"],"C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\ViewPost.js",["52"],"import React from 'react';\r\nimport {postsRef, commentsRef, usersRef} from '../firebase'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport {AuthConsumer} from './AuthContext'\r\n\r\nclass ViewPost extends React.Component {\r\n    commentInput = React.createRef();\r\n    constructor(props){\r\n        super(props);\r\n        console.log(this.props.match.params)\r\n        this.handleCommentSubmit.bind(this)\r\n    }\r\n    state = {\r\n        content: \"\",\r\n        title: \"\",\r\n        postingUser: \"\",\r\n        createdAt: \"\",\r\n        postId: \"\",\r\n        comments: [],\r\n        editingComment: false,\r\n        editingCommentId: '',\r\n        editingCommentContent: '',\r\n        displayName: '',\r\n        commenterDisplayName: '',\r\n    }\r\n    componentDidMount() {\r\n        this.fetchPost(this.props.match.params.postKey)\r\n        this.setState({displayName: this.props.match.params.displayName})\r\n        this.fetchComments(this.props.match.params.postKey)\r\n    }\r\n\r\n    handleCommentSubmit= async (e,userId) => {\r\n        e.preventDefault()\r\n        try {\r\n            const displayName = await usersRef\r\n            .where('user.uniqueId', '==', userId)\r\n            .get()\r\n            //displayName.docs()\r\n            displayName.forEach(doc => {\r\n                //console.log(doc.id, '=>', doc.data().user.displayName)\r\n                this.setState({commenterDisplayName: doc.data().user.displayName})\r\n            })\r\n            const comment = {\r\n                postId: this.state.postId,\r\n                content: this.commentInput.current.value,\r\n                commentingUser: userId,\r\n                commenterDisplayName: this.state.commenterDisplayName,\r\n                createdAt: new Date()\r\n            }\r\n            commentsRef.add({comment})\r\n        } catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    fetchPost = async postKey => {\r\n        try {\r\n        const post = postsRef.doc(postKey);\r\n        const doc = await post.get();\r\n        //console.log(doc.data().post);\r\n        this.setState({content: doc.data().post.content, title: doc.data().post.title, postingUser: doc.data().post.postingUser, createdAt: doc.data().post.createdAt.toDate().toLocaleString(), postId: postKey})\r\n        }\r\n        catch(error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    fetchComments = async postKey => {\r\n        try {\r\n            const comments = commentsRef\r\n            .where('comment.postId', '==', postKey)\r\n            .orderBy('comment.createdAt', 'desc')\r\n            .onSnapshot(snapShot => {\r\n                snapShot.docChanges()\r\n                .forEach(change=> {\r\n                    if(change.type === 'added'){\r\n                        const doc = change.doc\r\n                        const comment = {\r\n                            id: doc.id,\r\n                            content: doc.data().comment.content,\r\n                            createdAt: doc.data().comment.createdAt.toDate().toLocaleString(),\r\n                            postId: doc.data().comment.postId,\r\n                            commentingUser: doc.data().comment.commentingUser,\r\n                            commenterDisplayName: doc.data().comment.commenterDisplayName\r\n                        }\r\n                        this.setState({comments: [...this.state.comments, comment]})\r\n                    }\r\n                    if(change.type === 'removed') {\r\n                        this.setState({comments: [...this.state.comments.filter(comment => \r\n                            {\r\n                                return comment.id !== change.doc.id\r\n                            })]\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n        }catch(error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    deleteComment = async (e,commentId) => {\r\n        e.preventDefault()\r\n        if(window.confirm(\"Are you sure you want to delete this comment?\")){\r\n            try {\r\n                const comment = await commentsRef.doc(commentId)\r\n                this.setState({comments: [...this.state.comments.filter(comment => {\r\n                    return comment.id !== commentId\r\n                })\r\n            ]\r\n            })\r\n            comment.delete()\r\n        } catch(error) {\r\n                console.log(error)\r\n            }\r\n        } \r\n    }\r\n\r\n    handleEditComment = async(e,editingId,editingUser) => {\r\n        e.preventDefault()\r\n        console.log(this.state.commenterDisplayName)\r\n        const comment = {\r\n            postId: this.state.postId,\r\n            content: this.commentInput.current.value,\r\n            commentingUser: editingUser,\r\n            commenterDisplayName: this.state.commenterDisplayName,\r\n            createdAt: new Date()\r\n        }\r\n        //console.log(comment)\r\n        const currentComment = commentsRef.doc(editingId)\r\n        currentComment.update({comment})\r\n        alert(\"Please refresh the page to update comments\")\r\n    }\r\n\r\n    setUpdateComment = (e,commentId,commentContent, commenterDisplayName) => {\r\n        e.preventDefault()\r\n        this.setState({editingComment: !this.state.editingComment, editingCommentId: commentId, editingCommentContent: commentContent, commenterDisplayName: commenterDisplayName})\r\n    }\r\n\r\n    redirectToProfile = (userId) => {\r\n        this.props.history.push(`/${userId}/profile`)\r\n    }\r\n    \r\n    redirectToHome = () => {\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render () {\r\n        return (\r\n        <AuthConsumer>\r\n        {({user, logOut}) => ( \r\n            <>\r\n            <div className=\"Post bg-gray-600 h-screen space-y-4\">\r\n            <div className=\"PostWrapper w-full box-border border-8 border-green-500 bg-white\">\r\n            <h1 className=\"block text-center text-5xl font-mono\">{this.state.title}</h1>\r\n            <h2 className=\"block text-center text-3xl font-mono\">{this.state.displayName}</h2>\r\n            <h3 className=\"block text-center text-xl font-mono\">{this.state.createdAt}</h3>\r\n            <div className=\"block text-xl break-words\">{ReactHtmlParser(this.state.content)}</div>\r\n            </div>\r\n            <span className=\"block w-full bg-gray-600\">\r\n                {user.id ? \r\n                <>\r\n                {this.state.editingComment ? \r\n                <div><input className=\"px-1 w-3/4\" ref={this.commentInput} type='text' placeholder='Type a comment here!' defaultValue={this.state.editingCommentContent}/>\r\n                <button className=\"w-1/4 text-center bg-green-500 text-white border-2 border-black\" onClick={(e) => this.handleEditComment(e, this.state.editingCommentId, user.id)}>Submit Edit</button>\r\n                </div> : \r\n                <div>\r\n                <input className=\"px-1 w-3/4\" ref={this.commentInput} type='text' placeholder='Type a comment here!' defaultValue=''/>\r\n                <button className=\"w-1/4 text-center bg-green-500 text-white border-2 border-black\" onClick={(e) => this.handleCommentSubmit(e,user.id)}>Submit</button></div>\r\n                }\r\n                </>\r\n                : <></>\r\n            }\r\n                </span>\r\n                {Object.keys(this.state.comments).map(key =>\r\n                    <div key={key}>\r\n                        \r\n                        <div className=\"postComments w-full border-8 border-green-500 bg-white\">\r\n                            <div className=\"w-full\">{this.state.comments[key].commenterDisplayName} {this.state.comments[key].createdAt} \r\n                            {(user.id === this.state.comments[key].commentingUser) ? <>\r\n                            <button className=\"float-right text-lg align-text-top pr-1 bg-green-500 text-white border-2 border-black\" onClick={(e) => this.deleteComment(e,this.state.comments[key].id)}>Delete Comment</button>\r\n                            <button className=\"text-lg float-right bg-green-500 text-white border-2 border-black\" onClick={(e) => this.setUpdateComment(e, this.state.comments[key].id, this.state.comments[key].content, this.state.comments[key].commenterDisplayName)}>Edit Comment</button>\r\n                            </> \r\n                            : <></>}\r\n                            {(user.id === this.props.match.params.userId && user.id !== this.state.comments[key].commentingUser) ? \r\n                            <> \r\n                            <button className=\"float-right text-lg align-text-top pr-1 bg-green-500 text-white border-2 border-black\" onClick={(e) => this.deleteComment(e,this.state.comments[key].id)}>Delete Comment</button>\r\n                            </>\r\n                            :  <></>}\r\n                            </div>\r\n                            <p className=\"block font-mono\">{this.state.comments[key].content}</p>\r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                    <span className=\"w-full bg-green-500 text-white\">\r\n                        <button className=\"w-1/3 \" onClick={(e)=> this.redirectToProfile(this.state.postingUser)}>Return to Poster's Profile</button>\r\n                        <button className=\"w-1/3\" onClick={(e)=> this.redirectToHome()}>Return to Home Page</button>\r\n                        <button className=\"w-1/3\" onClick={(e)=> logOut()}>Log Out</button>\r\n                    </span>\r\n            </div>\r\n            </>\r\n            )}\r\n            </AuthConsumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ViewPost","C:\\Users\\CollinsJacob\\Web-Development\\Personal Projects\\blog\\src\\components\\Home.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":94,"column":13,"nodeType":"59","messageId":"60","endLine":96,"endColumn":66},{"ruleId":"61","severity":1,"message":"62","line":37,"column":14,"nodeType":"63","messageId":"64","endLine":37,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":98,"column":5,"nodeType":"67","endLine":98,"endColumn":26},{"ruleId":"65","severity":1,"message":"66","line":121,"column":67,"nodeType":"67","endLine":121,"endColumn":77},{"ruleId":"65","severity":1,"message":"66","line":121,"column":96,"nodeType":"67","endLine":121,"endColumn":106},{"ruleId":"61","severity":1,"message":"68","line":70,"column":19,"nodeType":"63","messageId":"64","endLine":70,"endColumn":27},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-multi-str","Multiline support is limited to browsers supporting ES5 only.","Literal","multilineString","no-unused-vars","'posts' is assigned a value but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'comments' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]